{"version":3,"sources":["../../src/routes/index.js"],"names":["router","express","Router","get","req","res","redirect","post","next","passport","authenticate","err","user","info","console","log","status","send","message","login","session","error","userForToken","id","_id","username","token","jwt","sign","process","env","ACCESS_TOKEN_SECRET","expiresIn","cookie","httpOnly","json","logout","clearCookie"],"mappings":";;;;;;AAAA;;;;AAGA;;;;AACA;;AAEA;;;;;;;;AALA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAOAF,OAAOG,GAAP,CAAW,GAAX,EAAgB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC1BA,QAAIC,QAAJ,CAAa,MAAb;AACH,CAFD;;AAIAN,OAAOO,IAAP,CAAY,QAAZ;AAAA,uEAAsB,kBAAOH,GAAP,EAAYC,GAAZ,EAAiBG,IAAjB;AAAA;AAAA;AAAA;AAAA;AAClBC,2CAASC,YAAT,CAAsB,OAAtB;AAAA,gGAA+B,kBAAOC,GAAP,EAAYC,IAAZ,EAAkBC,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,sDAEpBF,OAAO,CAACC,IAFY;AAAA;AAAA;AAAA;;AAGnBE,wDAAQC,GAAR,CAAYJ,GAAZ;AAHmB,kFAIZN,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,gCAAV,EAArB,CAJY;;AAAA;AAMvBd,oDAAIe,KAAJ,CAAUP,IAAV,EAAgB,EAAEQ,SAAS,KAAX,EAAhB;AAAA,wHAAoC,iBAAOC,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6EAC7BA,KAD6B;AAAA;AAAA;AAAA;;AAAA,yGACfb,KAAKa,KAAL,CADe;;AAAA;AAE1BC,oFAF0B,GAEX,EAAEC,IAAIX,KAAKY,GAAX,EAAgBC,UAAUb,KAAKa,QAA/B,EAFW;AAG1BC,6EAH0B,GAGlBC,uBAAIC,IAAJ,CAASN,YAAT,EAAuBO,QAAQC,GAAR,CAAYC,mBAAnC,EAAwD,EAAEC,WAAW,IAAb,EAAxD,CAHkB;;AAIhC3B,4EAAI4B,MAAJ,CAAW,OAAX,EAAoBP,KAApB,EAA2B,EAAEQ,UAAU,IAAZ,EAA3B;AAJgC,yGAKzB7B,IAAI8B,IAAJ,CAAS,EAACjB,SAAS,kBAAV,EAA8BQ,YAA9B,EAAqCJ,0BAArC,EAAT,CALyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAApC;;AAAA;AAAA;AAAA;AAAA;AANuB;AAAA;;AAAA;AAAA;AAAA;AAAA,kFAchBd,kBAdgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAA/B;;AAAA;AAAA;AAAA;AAAA,6BAgBIJ,GAhBJ,EAgBSC,GAhBT,EAgBcG,IAhBd;;AADkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAtB;;AAAA;AAAA;AAAA;AAAA;;AAqBAR,OAAOG,GAAP,CAAW,SAAX,EAAsB,UAASC,GAAT,EAAcC,GAAd,EAAkB;AACpCD,QAAIgC,MAAJ;AACA/B,QAAIgC,WAAJ,CAAgB,OAAhB;AACA,WAAOhC,IAAIY,IAAJ,CAAS,oBAAT,CAAP;AACH,CAJD;;kBAWejB,M","file":"index.js","sourcesContent":["import express, { response } from 'express'\nconst router = express.Router()\n\nimport passport from 'passport'\nimport '../passport'\n\nimport jwt from 'jsonwebtoken'\n\nrouter.get('/', (req, res) => {\n    res.redirect('/api')\n})\n\nrouter.post('/login', async (req, res, next) => {\n    passport.authenticate('login', async (err, user, info) => {\n        try {\n            if(err || !user) {\n                console.log(err)\n                return res.status(400).send({message: 'Incorrect username or password'})\n            }\n            req.login(user, { session: false }, async (error) => {\n                if(error) return next(error)\n                const userForToken = { id: user._id, username: user.username}\n                const token = jwt.sign(userForToken, process.env.ACCESS_TOKEN_SECRET, { expiresIn: '1d'})\n                res.cookie('token', token, { httpOnly: true })\n                return res.json({message: 'Login successful', token, userForToken})\n            })\n        } catch(error) {\n            return next(error)\n        }\n    }) (req, res, next)\n\n})\n\nrouter.get('/logout', function(req, res){\n    req.logout();\n    res.clearCookie('token')\n    return res.send('Log out successful')\n});\n        \n\n    \n\n\n\nexport default router"]}