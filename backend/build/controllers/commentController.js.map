{"version":3,"sources":["../../src/controllers/commentController.js"],"names":["exports","all_comments","req","res","next","Comment","find","populate","exec","err","comments","json","comments_list","post","params","postId","length","send","Object","values","comments_create_post","comment","name","body","text","timestamp","Date","now","BlogPost","findById","thepost","console","log","save","push","_id","comment_details","commentId","comments_edit_put","findByIdAndUpdate","thecomment","status","toJSON","comments_delete_delete","findByIdAndDelete","deleteComment","message"],"mappings":"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","file":"commentController.js","sourcesContent":["import BlogPost from '../models/BlogPost'\nimport Comment from '../models/Comment'\nimport User from '../models/User'\n\n// /comments\n\nexports.all_comments = (req, res, next) => {\n    Comment.find()\n           .populate('post')\n           .exec(function(err, comments) {\n               if(err) { return next(err) }\n               return res.json(comments)\n           })\n}\n\n// posts/postId/comments\nexports.comments_list = (req, res, next) => {\n    Comment.find({post: req.params.postId})\n           .exec(function(err, comments) {\n               if(err) { return next(err)}\n               if(comments.length < 1) {\n                   return res.send('No comments on this post')\n               }\n               return res.send(Object.values(comments))\n           }) \n}\n\nexports.comments_create_post = (req, res, next) => {\n    const comment = new Comment(\n        {\n            name: req.body.name,\n            text: req.body.text,\n            timestamp: Date.now(),\n            post: req.params.postId\n        }\n    )\n\n    BlogPost.findById(req.params.postId).exec(function(err, thepost) {\n        if(err) {return next(err)}\n        console.log(thepost)\n        comment.save(function(err) {\n            if (err) {return next(err)}\n            console.log(`${comment.name} posted a comment`)\n            thepost.comments.push(comment._id)\n            thepost.save()\n            return res.send(comment)\n        })\n\n    })\n\n    \n}\n\nexports.comment_details = (req, res, next) => {\n    Comment.find({_id: req.params.commentId})\n           .populate('post')\n           .exec(function(err, comment) {\n               if(err) { return next(err)}\n               return res.send(comment)\n           })\n}\n\nexports.comments_edit_put = (req, res, next) => {\n    Comment.findByIdAndUpdate({_id: req.params.commentId}, {name: req.body.name, text: req.body.text}, function(err, thecomment) {\n        if(err) { return next(err)}\n        return res.status(200).json(thecomment.toJSON())\n    })\n}\n\nexports.comments_delete_delete = (req, res, next) => {\n    Comment.findByIdAndDelete(req.params.commentId, function deleteComment(err) {\n        if(err) { return next(err)}\n        return res.json({message: `Comment ${req.params.commentId} was deleted`})\n    })\n\n\n}\n\n// exports.comments_create_get = (req, res) => {\n//     res.send('GET request to create new comment')\n// }\n\n// exports.comments_edit_get = (req, res) => {\n//     res.send('GET request to edit a comment')\n// }\n\n// exports.comments_delete_get = (req, res) => {\n//     res.send('GET request to delete comment')\n// }"]}