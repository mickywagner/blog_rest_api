{"version":3,"sources":["../../src/controllers/userController.js"],"names":["exports","user_list","req","res","next","User","find","exec","err","users","status","send","Object","values","user_create_post","findOne","email","body","emailExists","message","username","password","user","save","user_details","findById","params","userId","user_edit_put","editedUser","_id","bcrypt","hash","findByIdAndUpdate","theuser","user_delete_delete","findByIdAndDelete"],"mappings":";;AAAA;;AACA;;;;AAEA;;;;;;;;AAEAA,QAAQC,SAAR,GAAoB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACpCC,mBAAKC,IAAL,GACKC,IADL,CACU,UAASC,GAAT,EAAcC,KAAd,EAAqB;AACvB,YAAGD,GAAH,EAAQ;AAAE,mBAAOJ,KAAKI,GAAL,CAAP;AAAiB;AAC3B,eAAOL,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBC,OAAOC,MAAP,CAAcJ,KAAd,CAArB,CAAP;AACH,KAJL;AAKH,CAND;;AAQAT,QAAQc,gBAAR;AAAA,uEAA2B,iBAAOZ,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACGC,eAAKU,OAAL,CAAa,EAACC,OAAOd,IAAIe,IAAJ,CAASD,KAAjB,EAAb,CADH;;AAAA;AACjBE,mCADiB;;AAAA,6BAGpBA,WAHoB;AAAA;AAAA;AAAA;;AAAA,yDAGAf,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACQ,SAAS,sBAAV,EAArB,CAHA;;AAAA;AAAA;AAAA,+BAKH,IAAId,cAAJ,CAAS;AAC1BW,mCAAOd,IAAIe,IAAJ,CAASD,KADU;AAE1BI,sCAAUlB,IAAIe,IAAJ,CAASG,QAFO;AAG1BC,sCAAUnB,IAAIe,IAAJ,CAASI;AAHO,yBAAT,CALG;;AAAA;AAKjBC,4BALiB;;;AAWvBA,6BAAKC,IAAL,CAAU,UAASf,GAAT,EAAcc,IAAd,EAAoB;AAC1B,gCAAGd,GAAH,EAAQ,OAAOJ,KAAKI,GAAL,CAAP;AACR,mCAAOL,IAAIQ,IAAJ,CAASW,IAAT,CAAP;AACH,yBAHD;;AAXuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA3B;;AAAA;AAAA;AAAA;AAAA;;AAiBAtB,QAAQwB,YAAR,GAAuB,UAACtB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvCC,mBAAKoB,QAAL,CAAcvB,IAAIwB,MAAJ,CAAWC,MAAzB,EAAiC,UAASnB,GAAT,EAAcc,IAAd,EAAoB;AACjD,YAAGd,GAAH,EAAQ,OAAOL,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACQ,SAAS,qBAAV,EAArB,CAAP;AACR,eAAOhB,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBW,IAArB,CAAP;AACH,KAHD;AAIH,CALD;;AAOAtB,QAAQ4B,aAAR;AAAA,wEAAwB,kBAAO1B,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACdyB,kCADc,GACD,IAAIxB,cAAJ,CAAS;AACxByB,iCAAK5B,IAAIwB,MAAJ,CAAWC,MADQ;AAExBP,sCAAUlB,IAAIe,IAAJ,CAASG,QAFK;AAGxBJ,mCAAOd,IAAIe,IAAJ,CAASD;AAHQ,yBAAT,CADC;;AAAA,6BAOjBd,IAAIe,IAAJ,CAASI,QAPQ;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAQYU,mBAAOC,IAAP,CAAY9B,IAAIe,IAAJ,CAASI,QAArB,EAA+B,EAA/B,CARZ;;AAAA;AAQhBQ,mCAAWR,QARK;;AAAA;;AAWpBhB,uCAAK4B,iBAAL,CAAuB/B,IAAIwB,MAAJ,CAAWC,MAAlC,EAA0CE,UAA1C,EAAsD,EAAtD,EAA0D,UAASrB,GAAT,EAAc0B,OAAd,EAAuB;AAC7E,gCAAG1B,GAAH,EAAQ;AAAC,uCAAOJ,KAAKI,GAAL,CAAP;AAAiB;AAC1B,mCAAOL,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,0BAAP;AACH,yBAHD;;AAXoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAxB;;AAAA;AAAA;AAAA;AAAA;;AAiBAX,QAAQmC,kBAAR,GAA6B,UAACjC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC7CC,mBAAK+B,iBAAL,CAAuBlC,IAAIwB,MAAJ,CAAWC,MAAlC,EAA0C,UAASnB,GAAT,EAAcc,IAAd,EAAoB;AAC1D,YAAGd,GAAH,EAAQ,OAAOJ,KAAKI,GAAL,CAAP;AACRL,YAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACQ,SAAYG,IAAZ,iBAAD,EAArB;AACH,KAHD;AAIH,CALD","file":"userController.js","sourcesContent":["import 'dotenv/config'\nimport User from '../models/User'\n\nimport bcrypt from 'bcryptjs'\n\nexports.user_list = (req, res, next) => {\n    User.find()\n        .exec(function(err, users) {\n            if(err) { return next(err)}\n            return res.status(200).send(Object.values(users))\n        })\n}\n\nexports.user_create_post = async (req, res, next) => {\n    const emailExists = await User.findOne({email: req.body.email})\n    \n    if(emailExists) return res.status(400).send({message: 'Email already in use'})\n    \n    const user =  await new User({\n       email: req.body.email, \n       username: req.body.username, \n       password: req.body.password\n    })\n\n    user.save(function(err, user) {\n        if(err) return next(err)\n        return res.send(user)\n    })\n}  \n\nexports.user_details = (req, res, next) => {\n    User.findById(req.params.userId, function(err, user) {\n        if(err) return res.status(400).send({message: 'User does not exist'})\n        return res.status(200).send(user)\n    })\n}\n\nexports.user_edit_put = async (req, res, next) => {\n    const editedUser = new User({\n        _id: req.params.userId,\n        username: req.body.username,\n        email: req.body.email,\n    })\n\n    if(req.body.password) {\n        editedUser.password = await bcrypt.hash(req.body.password, 10)\n    }\n\n    User.findByIdAndUpdate(req.params.userId, editedUser, {}, function(err, theuser) {\n        if(err) {return next(err)}\n        return res.status(200).send(`User edited successful`)\n    })\n}\n\nexports.user_delete_delete = (req, res, next) => {\n    User.findByIdAndDelete(req.params.userId, function(err, user) {\n        if(err) return next(err)\n        res.status(200).send({message: `${user} was deleted`})\n    })\n}\n\n\n"]}