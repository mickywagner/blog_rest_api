{"version":3,"sources":["../../src/controllers/blogPostController.js"],"names":["exports","posts_list","req","res","next","BlogPost","find","populate","exec","err","posts","json","posts_create_post","blog","title","body","author","user","_id","timestamp","Date","now","text","isPublished","save","send","toJSON","posts_details","params","postId","post","posts_edit_put","editedBlog","likes","dislikes","findByIdAndUpdate","thepost","status","posts_put_like","result","message","posts_put_dislike","posts_delete_delete","Comment","deleteMany","console","log","findByIdAndDelete","deletePost"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AAEAA,QAAQC,UAAR,GAAqB,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACrCC,uBAASC,IAAT,GACSC,QADT,CACkB,QADlB,EAESC,IAFT,CAEc,UAASC,GAAT,EAAcC,KAAd,EAAqB;AAC/B,YAAGD,GAAH,EAAQ;AAAE,mBAAOL,KAAKK,GAAL,CAAP;AAAiB;AAC3B,eAAON,IAAIQ,IAAJ,CAASD,KAAT,CAAP;AACH,KALD;AAOH,CARD;;AAUAV,QAAQY,iBAAR,GAA4B,UAACV,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC5C,QAAMS,OAAO,IAAIR,kBAAJ,CACT;AACIS,eAAOZ,IAAIa,IAAJ,CAASD,KADpB;AAEIE,gBAAQd,IAAIe,IAAJ,CAASC,GAFrB;AAGIC,mBAAWC,KAAKC,GAAL,EAHf;AAIIC,cAAMpB,IAAIa,IAAJ,CAASO,IAJnB;AAKIC,qBAAarB,IAAIa,IAAJ,CAASQ;AAL1B,KADS,CAAb;AASAV,SAAKW,IAAL;;AAEA,WAAOrB,IAAIsB,IAAJ,CAASZ,KAAKa,MAAL,EAAT,CAAP;AACH,CAbD;;AAeA1B,QAAQ2B,aAAR,GAAwB,UAACzB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACzCC,uBAASC,IAAT,CAAc,EAACY,KAAKhB,IAAI0B,MAAJ,CAAWC,MAAjB,EAAd,EACStB,QADT,CACkB,QADlB,EAESA,QAFT,CAEkB,UAFlB,EAGSC,IAHT,CAGc,UAASC,GAAT,EAAcqB,IAAd,EAAoB;AACtB,YAAGrB,GAAH,EAAQ,OAAOL,KAAKK,GAAL,CAAP;AACR,eAAON,IAAIQ,IAAJ,CAASmB,IAAT,CAAP;AACH,KANT;AAOF,CARD;;AAUA9B,QAAQ+B,cAAR,GAAyB,UAAC7B,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACzC,QAAM4B,aAAa,IAAI3B,kBAAJ,CACf;AACIa,aAAKhB,IAAI0B,MAAJ,CAAWC,MADpB;AAEIf,eAAOZ,IAAIa,IAAJ,CAASD,KAFpB;AAGIQ,cAAMpB,IAAIa,IAAJ,CAASO,IAHnB;AAIIC,qBAAarB,IAAIa,IAAJ,CAASQ,WAJ1B;AAKIU,eAAO/B,IAAIa,IAAJ,CAASkB,KALpB;AAMIC,kBAAUhC,IAAIa,IAAJ,CAASmB;;AANvB,KADe,CAAnB;;AAYA7B,uBAAS8B,iBAAT,CAA2BjC,IAAI0B,MAAJ,CAAWC,MAAtC,EAA8CG,UAA9C,EAA0D,EAA1D,EAA8D,UAASvB,GAAT,EAAc2B,OAAd,EAAuB;AACjF,YAAG3B,GAAH,EAAQ;AAAE,mBAAOL,KAAKK,GAAL,CAAP;AAAiB;AAC3B,eAAON,IAAIkC,MAAJ,CAAW,GAAX,EAAgB1B,IAAhB,CAAqBqB,WAAWN,MAAX,EAArB,CAAP;AACH,KAHD;AAIH,CAjBD;;AAmBA1B,QAAQsC,cAAR,GAAyB,UAACpC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACzCC,uBAAS8B,iBAAT,CAA2B,EAACjB,KAAKhB,IAAI0B,MAAJ,CAAWC,MAAjB,EAA3B,EAAqD,EAACI,OAAO/B,IAAIa,IAAJ,CAASkB,KAAjB,EAArD,EAA8E,UAASxB,GAAT,EAAc8B,MAAd,EAAsB;AAChG,YAAG9B,GAAH,EAAQ,OAAOL,KAAKK,GAAL,CAAP;AACR,eAAON,IAAIQ,IAAJ,CAAS,EAAC6B,SAAS,eAAV,EAAT,CAAP;AACH,KAHD;AAIH,CALD;;AAOAxC,QAAQyC,iBAAR,GAA4B,UAACvC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC5CC,uBAAS8B,iBAAT,CAA2B,EAACjB,KAAKhB,IAAI0B,MAAJ,CAAWC,MAAjB,EAA3B,EAAqD,EAACK,UAAUhC,IAAIa,IAAJ,CAASmB,QAApB,EAArD,EAAoF,UAASzB,GAAT,EAAc8B,MAAd,EAAsB;AACtG,YAAG9B,GAAH,EAAQ,OAAOL,KAAKK,GAAL,CAAP;AACR,eAAON,IAAIQ,IAAJ,CAAS,EAAC6B,SAAS,mBAAV,EAAT,CAAP;AACH,KAHD;AAIH,CALD;;AAOAxC,QAAQ0C,mBAAR,GAA8B,UAACxC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC9CuC,sBAAQrC,IAAR,GAAesC,UAAf,CAA0B,EAACd,MAAM5B,IAAI0B,MAAJ,CAAWC,MAAlB,EAA1B,EAAqD,UAASpB,GAAT,EAAc;AAC/D,YAAGA,GAAH,EAAQ;AAAC,mBAAOL,KAAKK,GAAL,CAAP;AAAiB;AAC1BoC,gBAAQC,GAAR,CAAY,kBAAZ;AACH,KAHD;AAIAzC,uBAAS0C,iBAAT,CAA2B7C,IAAI0B,MAAJ,CAAWC,MAAtC,EAA8C,SAASmB,UAAT,CAAoBvC,GAApB,EAAyB;AACnE,YAAGA,GAAH,EAAQ;AAAC,mBAAOL,KAAKK,GAAL,CAAP;AAAiB;AAC1B,eAAON,IAAIQ,IAAJ,CAAS,EAAC6B,wBAAsBtC,IAAI0B,MAAJ,CAAWC,MAAjC,iBAAD,EAAT,CAAP;AACH,KAHD;AAKH,CAVD","file":"blogPostController.js","sourcesContent":["import BlogPost from '../models/BlogPost'\nimport Comment from '../models/Comment'\nimport User from '../models/User'\n\nexports.posts_list = (req, res, next) => {\n    BlogPost.find()\n            .populate('author')\n            .exec(function(err, posts) {\n        if(err) { return next(err)}\n        return res.json(posts)\n    })\n    \n}\n\nexports.posts_create_post = (req, res, next) => {\n    const blog = new BlogPost(\n        {\n            title: req.body.title,\n            author: req.user._id,\n            timestamp: Date.now(),\n            text: req.body.text,\n            isPublished: req.body.isPublished\n        }\n    )\n    blog.save()\n\n    return res.send(blog.toJSON())\n}\n\nexports.posts_details = (req, res, next) => {\n   BlogPost.find({_id: req.params.postId}) \n           .populate('author')\n           .populate('comments')\n           .exec(function(err, post) {\n               if(err) return next(err)\n               return res.json(post)\n           })\n}\n\nexports.posts_edit_put = (req, res, next) => {\n    const editedBlog = new BlogPost(\n        {\n            _id: req.params.postId,\n            title: req.body.title,\n            text: req.body.text,\n            isPublished: req.body.isPublished,\n            likes: req.body.likes,\n            dislikes: req.body.dislikes\n\n        }\n    )\n    \n    BlogPost.findByIdAndUpdate(req.params.postId, editedBlog, {}, function(err, thepost) {\n        if(err) { return next(err)}\n        return res.status(200).json(editedBlog.toJSON())\n    })\n}\n\nexports.posts_put_like = (req, res, next) => {\n    BlogPost.findByIdAndUpdate({_id: req.params.postId}, {likes: req.body.likes}, function(err, result) {\n        if(err) return next(err)\n        return res.json({message: 'Like updated!'})\n    })\n}\n\nexports.posts_put_dislike = (req, res, next) => {\n    BlogPost.findByIdAndUpdate({_id: req.params.postId}, {dislikes: req.body.dislikes}, function(err, result) {\n        if(err) return next(err)\n        return res.json({message: 'Dislikes updated!'})\n    })\n}\n\nexports.posts_delete_delete = (req, res, next) => {\n    Comment.find().deleteMany({post: req.params.postId}, function(err) {\n        if(err) {return next(err)}\n        console.log('comments deleted')\n    })\n    BlogPost.findByIdAndDelete(req.params.postId, function deletePost(err) {\n        if(err) {return next(err)}\n        return res.json({message: `Blog Post ${req.params.postId} was deleted`})\n    })\n            \n}\n\n"]}