{"version":3,"sources":["../src/passport.js"],"names":["JwtStrategy","require","Strategy","ExtractJwt","opts","jwtFromRequest","cookieExtractor","req","token","cookies","secretOrKey","process","env","ACCESS_TOKEN_SECRET","passport","use","jwt_payload","done","User","findOne","_id","id","err","user","LocalStategy","usernameField","passwordField","email","password","message","isValidPassword","validate"],"mappings":";;AAAA;;;;AACA;;;;AAKA;;;;;;;;AAHA,IAAMA,cAAcC,QAAQ,cAAR,EAAwBC,QAA5C;AACA,IAAMC,aAAaF,QAAQ,cAAR,EAAwBE,UAA3C;;AAIA,IAAMC,OAAO,EAAb;AACAA,KAAKC,cAAL,GAAsB,SAASC,eAAT,CAAyBC,GAAzB,EAA8B;AAChD,QAAIC,QAAQ,IAAZ;AACA,QAAID,OAAOA,IAAIE,OAAf,EACA;AACID,gBAAQD,IAAIE,OAAJ,CAAY,OAAZ,CAAR;AACH;AACD,WAAOD,KAAP;AACH,CAPD;;AASAJ,KAAKM,WAAL,GAAmBC,QAAQC,GAAR,CAAYC,mBAA/B;;AAEAC,mBAASC,GAAT,CAAa,IAAIf,WAAJ,CAAgBI,IAAhB,EAAsB,UAACY,WAAD,EAAcC,IAAd,EAAuB;AACtDC,mBAAKC,OAAL,CAAa,EAACC,KAAKJ,YAAYK,EAAlB,EAAb,EAAoC,UAASC,GAAT,EAAcC,IAAd,EAAoB;AACpD,YAAGD,GAAH,EAAQ;AACJ,mBAAOL,KAAKK,GAAL,EAAU,KAAV,CAAP;AACH;AACD,YAAGC,IAAH,EAAS;AACL,mBAAON,KAAK,IAAL,EAAWM,IAAX,CAAP;AACH,SAFD,MAEO;AACH,mBAAON,KAAK,IAAL,EAAW,KAAX,CAAP;AACH;AACJ,KATD;AAUH,CAXY,CAAb;;AAaAH,mBAASC,GAAT,CAAa,OAAb,EAAsB,IAAIS,uBAAJ,CAAiB;AACnCC,mBAAe,OADoB;AAEnCC,mBAAe;AAFoB,CAAjB;AAAA,uEAGnB,iBAAOC,KAAP,EAAcC,QAAd,EAAwBX,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEwBC,eAAKC,OAAL,CAAa,EAACQ,YAAD,EAAb,CAFxB;;AAAA;AAEWJ,4BAFX;;AAAA,4BAGSA,IAHT;AAAA;AAAA;AAAA;;AAAA,yDAIgBN,KAAK,IAAL,EAAW,KAAX,EAAkB,EAACY,SAAS,gBAAV,EAAlB,CAJhB;;AAAA;AAAA;AAAA,+BAO4BN,KAAKO,eAAL,CAAqBF,QAArB,CAP5B;;AAAA;AAOWG,gCAPX;;AAAA,4BAQSA,QART;AAAA;AAAA;AAAA;;AAAA,yDASgBd,KAAK,IAAL,EAAW,KAAX,EAAkB,EAACY,SAAS,oBAAV,EAAlB,CAThB;;AAAA;AAAA,yDAWYZ,KAAK,IAAL,EAAWM,IAAX,EAAiB,EAAEM,SAAS,kBAAX,EAAjB,CAXZ;;AAAA;AAAA;AAAA;AAAA,yDAcYZ,iBAdZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAHmB;;AAAA;AAAA;AAAA;AAAA,IAAtB","file":"passport.js","sourcesContent":["import passport from 'passport'\nimport LocalStategy from 'passport-local'\n\nconst JwtStrategy = require('passport-jwt').Strategy;\nconst ExtractJwt = require('passport-jwt').ExtractJwt;\n\nimport User from './models/User'\n\nconst opts = {}\nopts.jwtFromRequest = function cookieExtractor(req) {\n    var token = null;\n    if (req && req.cookies)\n    {\n        token = req.cookies['token'];\n    }\n    return token;\n};\n\nopts.secretOrKey = process.env.ACCESS_TOKEN_SECRET\n\npassport.use(new JwtStrategy(opts, (jwt_payload, done) => {\n    User.findOne({_id: jwt_payload.id}, function(err, user) {\n        if(err) {\n            return done(err, false)\n        }\n        if(user) {\n            return done(null, user)\n        } else {\n            return done(null, false)\n        }\n    })\n}))\n\npassport.use('login', new LocalStategy({\n    usernameField: 'email',\n    passwordField: 'password'\n}, async (email, password, done) => {\n    try {\n        const user = await User.findOne({email})\n        if(!user) {\n            return done(null, false, {message: 'User not found'})\n        }\n\n        const validate = await user.isValidPassword(password)\n        if(!validate) {\n            return done(null, false, {message: 'Incorrect password'})\n        }\n        return done(null, user, { message: 'Login successful'})\n\n    } catch(error) {\n        return done(error)\n    }\n    \n}))"]}